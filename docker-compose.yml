version: '3.8'

services:
  # Tu API Spring Boot
  api:
    build: .
    container_name: restaurantes-api-app
    ports:
      - "3001:8080"  # localhost:3001 -> contenedor:8080
    environment:
      # Base de datos (usa el nombre del servicio como host)
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}

      # Configuración de la app
      - SERVER_PORT=8080
      - APP_NAME=${APP_NAME}
      - LOG_LEVEL=${LOG_LEVEL}
      - DDL_AUTO=${DDL_AUTO}
      - SHOW_SQL=${SHOW_SQL}

      # JWT
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_ISSUER=${JWT_ISSUER}

      # Actuator Security
      - ACTUATOR_USERNAME=${ACTUATOR_USERNAME}
      - ACTUATOR_PASSWORD=${ACTUATOR_PASSWORD}

    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - restaurant-network
    restart: unless-stopped

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: restaurantes-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"  # Accesible desde tu IDE
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/docker-entrypoint-initdb.d  # Scripts de inicialización
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - restaurant-network
    restart: unless-stopped

  # Opcional: PgAdmin para gestionar la DB
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: restaurantes-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT:-5050}:80"  # Acceder en localhost:5050
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - restaurant-network
    restart: unless-stopped

# Volúmenes para persistir datos
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Red personalizada
networks:
  restaurant-network:
    driver: bridge
